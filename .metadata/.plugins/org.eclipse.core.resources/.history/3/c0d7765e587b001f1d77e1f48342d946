package ipsl.signature;

import org.apache.http.HttpResponse;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.message.BasicHeaderElementIterator;
import org.apache.http.HeaderElementIterator;
import org.apache.http.HeaderElement;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;

import javax.net.ssl.SSLContext;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.*;
import java.security.cert.CertificateException;

public class HttpClientConfig {

    // Timeouts (in milliseconds)
    private static final int CONNECT_TIMEOUT = 10000;
    private static final int REQUEST_TIMEOUT = 20000;
    private static final int SOCKET_TIMEOUT = 30000;

    // Connection pool settings
    private static final int MAX_TOTAL_CONNECTIONS = 500;
    private static final int DEFAULT_MAX_PER_ROUTE = 150;
    private static final int DEFAULT_KEEP_ALIVE_TIME_MILLIS = 20 * 1000;

    // Keystore information
    private static final String KEYSTORE_PATH = "path/to/your/keystore.jks";
    private static final String KEYSTORE_PASSWORD = "password";

    public static void main(String[] args) {
        try {
            CloseableHttpClient httpClient = createHttpClient();
            // Use httpClient for your requests here
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to create CloseableHttpClient
    public static CloseableHttpClient createHttpClient()
            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, KeyManagementException {

        // Create RequestConfig
        RequestConfig requestConfig = RequestConfig
                .custom()
                .setConnectionRequestTimeout(REQUEST_TIMEOUT)
                .setConnectTimeout(CONNECT_TIMEOUT)
                .setSocketTimeout(SOCKET_TIMEOUT)
                .build();

        // Build the HttpClient
        return HttpClients
                .custom()
                .setDefaultRequestConfig(requestConfig)
                .setConnectionManager(createPoolingConnectionManager())
                .setKeepAliveStrategy(createKeepAliveStrategy())
                .build();
    }

    // Method to create PoolingHttpClientConnectionManager
    public static PoolingHttpClientConnectionManager createPoolingConnectionManager()
            throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, KeyManagementException {

        char[] password = KEYSTORE_PASSWORD.toCharArray();
        FileInputStream fis = new FileInputStream(KEYSTORE_PATH);
        BufferedInputStream bis = new BufferedInputStream(fis);

        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(bis, password);

        SSLContext sslContext = SSLContexts
                .custom()
                .loadKeyMaterial(keyStore, password)
                .loadTrustMaterial(null, new TrustSelfSignedStrategy()) // Trust self-signed certificates or customize for CA
                .build();

        SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(
                sslContext, NoopHostnameVerifier.INSTANCE);  // Disabling hostname verification

        Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder
                .<ConnectionSocketFactory>create()
                .register("https", sslSocketFactory)
                .register("http", new PlainConnectionSocketFactory())
                .build();

        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
        connectionManager.setMaxTotal(MAX_TOTAL_CONNECTIONS);
        connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);

        return connectionManager;
    }

    // Method to create ConnectionKeepAliveStrategy
    public static ConnectionKeepAliveStrategy createKeepAliveStrategy() {
        return new DefaultConnectionKeepAliveStrategy() {
            @Override
            public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
                HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));
                while (it.hasNext()) {
                    HeaderElement he = it.nextElement();
                    String param = he.getName();
                    String value = he.getValue();

                    if (value != null && param.equalsIgnoreCase("timeout")) {
                        return Long.parseLong(value) * 1000;
                    }
                }
                return DEFAULT_KEEP_ALIVE_TIME_MILLIS;
            }
        };
    }
}
