package ipsl.signature;

import org.apache.http.HeaderElement;
import org.apache.http.HeaderElementIterator;
import org.apache.http.HttpResponse;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.protocol.HttpContext;
import org.apache.synapse.registry.Registry;
import org.apache.http.message.BasicHeaderElementIterator;
import org.apache.http.protocol.HTTP;
import javax.net.ssl.SSLContext;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.*;
import java.security.cert.CertificateException;
public class PasswordEncryption {
private static final int CONNECT_TIMEOUT = 10000;
 private static final int REQUEST_TIMEOUT = 20000;
   
    private static final int MAX_TOTAL_CONNECTIONS = 500;
private static final int DEFAULT_MAX_PER_ROUTE = 150;
    private static final int DEFAULT_KEEP_ALIVE_TIME_MILLIS = 20 * 1000;
    private static final int CLOSE_IDLE_CONNECTION_WAIT_TIME_SECS = 30;
    private String keyStorePath;
    private String keyStorePassword;
    public PasswordEncryption(String keyStorePath, String keyStorePassword) {
        this.keyStorePath = keyStorePath;
        this.keyStorePassword = keyStorePassword;
    }
    public CloseableHttpClient createHttpClient() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, KeyManagementException {
        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(REQUEST_TIMEOUT).setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();
        return HttpClients.custom().setDefaultRequestConfig(requestConfig).setConnectionManager(createPoolingConnectionManager()).setKeepAliveStrategy(createConnectionKeepAliveStrategy()).build();
    }
    private PoolingHttpClientConnectionManager createPoolingConnectionManager() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, KeyManagementException {
        char[] password = keyStorePassword.toCharArray();
        FileInputStream fis = new FileInputStream(keyStorePath);
        BufferedInputStream is = new BufferedInputStream(fis);
        KeyStore ks;
        ks = KeyStore.getInstance(KeyStore.getDefaultType());
        ks.load(is, password);
        SSLContext sslContext = SSLContexts.custom().loadKeyMaterial(ks, password).loadTrustMaterial(null, new TrustSelfSignedStrategy()).build();
        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); /* private Registry<ConnectionSocketFactory> createSocketFactoryRegistry(SSLConnectionSocketFactory sslSocketFactory) {            return RegistryBuilder.<ConnectionSocketFactory>create()                    .register("https", sslSocketFactory)                    .register("http", new PlainConnectionSocketFactory())                    .build();        }*/
        Registry < ConnectionSocketFactory > socketFactoryRegistry = RegistryBuilder. < ConnectionSocketFactory > create().register("https", sslsf).build();
        PoolingHttpClientConnectionManager poolingConnectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
        poolingConnectionManager.setMaxTotal(MAX_TOTAL_CONNECTIONS);
        poolingConnectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);
        return poolingConnectionManager;
    }
    private ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() {
        return new ConnectionKeepAliveStrategy() {
            @Override public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
                HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));
                while (it.hasNext()) {
                    HeaderElement he = it.nextElement();
                    String param = he.getName();
                    String value = he.getValue();
                    if (value != null && param.equalsIgnoreCase("timeout")) {
                        return Long.parseLong(value) * 1000;
                    }
                }
                return DEFAULT_KEEP_ALIVE_TIME_MILLIS;
            }
        };
    }
    public static void main(String[] args) {
        try {
            PasswordEncryption config = new PasswordEncryption("path/to/keystore.jks", "keystorePassword");
            CloseableHttpClient client = config.createHttpClient();
            Use the client as needed
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}