package ipsl.signature;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class CDataMediator extends AbstractMediator {
   public boolean mediate(MessageContext context) {
      String clientRequest = (String)context.getProperty("request");
      String spId = (String)context.getProperty("spId");
      String spPassword = (String)context.getProperty("spPassword");
      String serviceId = (String)context.getProperty("serviceId");
      String timeStamp = (String)context.getProperty("timeStamp");
      String backendUrl = (String)context.getProperty("backendUrl");

      try {
         InputStream inputStream = new ByteArrayInputStream(clientRequest.getBytes("UTF-8"));
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         factory.setNamespaceAware(true);
         DocumentBuilder builder = factory.newDocumentBuilder();
         Document document = builder.parse(inputStream);
         document.getDocumentElement().normalize();
         NodeList requestNodes = document.getElementsByTagNameNS("http://api-v1.gen.mm.vodafone.com/mminterface/request", "request");
         String response = nodeToString(requestNodes.item(0));
         String responseXml = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:req=\"http://api-v1.gen.mm.vodafone.com/mminterface/request\">    <soapenv:Header xmlns:tns=\"http://www.huawei.com/schema/osg/common/v2_1\">        <tns:RequestSOAPHeader>            <tns:spId>" + spId + "</tns:spId>" + "            <tns:spPassword>" + spPassword + "</tns:spPassword>" + "            <tns:serviceId>" + serviceId + "</tns:serviceId>" + "            <tns:timeStamp>" + timeStamp + "</tns:timeStamp>" + "        </tns:RequestSOAPHeader>" + "    </soapenv:Header>" + "    <soapenv:Body>" + "        <req:RequestMsg><![CDATA[" + response + "]]></req:RequestMsg>" + "    </soapenv:Body>" + "</soapenv:Envelope>";
         System.out.println("Formatted Response XML:");
         System.out.println(responseXml);
         context.setProperty("response", responseXml);
         Throwable var15 = null;
         Object var16 = null;

         try {
            CloseableHttpClient httpClient = HttpClients.createDefault();

            try {
               HttpPost httpPost = new HttpPost(backendUrl);
               StringEntity entity = new StringEntity(responseXml);
               httpPost.setEntity(entity);
               httpPost.setHeader("Content-Type", "text/xml");
               Throwable var20 = null;
               Object var21 = null;

               try {
                  CloseableHttpResponse httpResponse = httpClient.execute(httpPost);

                  try {
                     BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()));
                     StringBuilder responseString = new StringBuilder();

                     String line;
                     while((line = reader.readLine()) != null) {
                        responseString.append(line);
                     }

                     reader.close();
                     System.out.println("Backend Response:");
                     System.out.println(responseString.toString());
                     context.setProperty("response", responseString.toString());
                  } finally {
                     if (httpResponse != null) {
                        httpResponse.close();
                     }

                  }
               } catch (Throwable var47) {
                  if (var20 == null) {
                     var20 = var47;
                  } else if (var20 != var47) {
                     var20.addSuppressed(var47);
                  }

                  throw var20;
               }
            } finally {
               if (httpClient != null) {
                  httpClient.close();
               }

            }
         } catch (Throwable var49) {
            if (var15 == null) {
               var15 = var49;
            } else if (var15 != var49) {
               var15.addSuppressed(var49);
            }

            throw var15;
         }
      } catch (SAXException | ParserConfigurationException | IOException var50) {
         var50.printStackTrace();
      }

      return true;
   }

   private static String nodeToString(Node node) {
      try {
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
         Transformer transformer = transformerFactory.newTransformer();
         transformer.setOutputProperty("omit-xml-declaration", "yes");
         DOMSource source = new DOMSource(node);
         StringWriter writer = new StringWriter();
         StreamResult result = new StreamResult(writer);
         transformer.transform(source, result);
         return writer.getBuffer().toString();
      } catch (TransformerException var6) {
         var6.printStackTrace();
         return null;
      }
   }
}
