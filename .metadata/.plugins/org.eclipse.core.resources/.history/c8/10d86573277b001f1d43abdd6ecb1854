package XMLSignatureTestProject;


import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Key;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class ClientTest {

    protected static String typAlgorithm = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
    protected static String canAlgorithm = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
    protected static String digAlgorithm = "http://www.w3.org/2001/04/xmlenc#sha256";
    protected static String sigAlgorithm = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";

    protected static boolean omitDec = true;
    protected static boolean indent = false;

    public static String generateSignature(String rawXml, String keystorePath, String keystorePws) {
        // Implement signature generation logic here if needed
        return "";
    }

    public static KeyStore loadKeyStore(String keystoreFile, String keystorePass) throws Exception {
        KeyStore keyStore = null;

        if (keystoreFile == null || keystoreFile.length() == 0) {
            return keyStore;
        }

        InputStream is = openResource(keystoreFile);
        if (is == null) {
            return keyStore;
        }

        if (keystorePass == null)
            keystorePass = "";

        if (keystoreFile.endsWith(".p12")) {
            keyStore = KeyStore.getInstance("PKCS12", "BC");
        } else {
            keyStore = KeyStore.getInstance("JKS");
        }
        keyStore.load(is, keystorePass.toCharArray());

        return keyStore;
    }

    public static InputStream openResource(String fileName) throws Exception {
        if (fileName == null || fileName.length() == 0) {
            return null;
        }
        if (fileName.startsWith("/") || fileName.indexOf(':') > 0) {
            return new FileInputStream(fileName);
        }
        return Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);
    }

    public static PrivateKey loadPrivateKey(String keystoreAlias, KeyStore keyStore, String keystorePass)
            throws Exception {
        Key aliasKey = keyStore.getKey(keystoreAlias, keystorePass.toCharArray());
        return aliasKey instanceof PrivateKey ? (PrivateKey) aliasKey : null;
    }

    public static Certificate loadCertificate(String keystoreAlias, KeyStore keyStore, String keystorePass)
            throws Exception {
        Certificate aliasCertificate = keyStore.getCertificate(keystoreAlias);
        return aliasCertificate instanceof X509Certificate ? (X509Certificate) aliasCertificate : null;
    }

    public static String sign(String content, String keystoreFile, String keystorePass, String keystoreAlias)
            throws Exception {
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setNamespaceAware(true);
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.parse(new ByteArrayInputStream(content.getBytes()));

        KeyStore ks = loadKeyStore(keystoreFile, keystorePass);
        XMLSignature xmlSignature = createXMLSignature(document, ks, keystorePass, keystoreAlias);
        Element rootNode = document.getDocumentElement();

        DOMSignContext domSignContext = new DOMSignContext(loadPrivateKey(keystoreAlias, ks, keystorePass), rootNode);
        domSignContext.setDefaultNamespacePrefix("ds");
        xmlSignature.sign(domSignContext);

        return nodeToString(rootNode);
    }

    public static String nodeToString(Node node) throws Exception {
        StringWriter stringWriter = new StringWriter();
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, omitDec ? "yes" : "no");
        transformer.setOutputProperty(OutputKeys.INDENT, indent ? "yes" : "no");
        transformer.transform(new DOMSource(node), new StreamResult(stringWriter));
        return stringWriter.toString();
    }

    public static XMLSignature createXMLSignature(Document document, KeyStore ks, String keystorePass,
            String keystoreAlias) throws Exception {
        XMLSignatureFactory xmlSignatureFactory = XMLSignatureFactory.getInstance("DOM",
                new org.apache.jcp.xml.dsig.internal.dom.XMLDSigRI());
        CanonicalizationMethod c14nMethod = xmlSignatureFactory.newCanonicalizationMethod(canAlgorithm,
                (C14NMethodParameterSpec) null);
        DigestMethod digestMethod = xmlSignatureFactory.newDigestMethod(digAlgorithm, null);
        SignatureMethod signMethod = xmlSignatureFactory.newSignatureMethod(sigAlgorithm, null);
        Transform sigTransform = xmlSignatureFactory.newTransform(typAlgorithm, (TransformParameterSpec) null);
        Transform canTransform = xmlSignatureFactory.newTransform(canAlgorithm, (TransformParameterSpec) null);

        List<Transform> transforms = new ArrayList();
        transforms.add(sigTransform);
        transforms.add(canTransform);

        String UNIQUE_GUID = UUID.randomUUID().toString();
        String sQualifyingPropertiesId = "_" + UNIQUE_GUID;

        Reference referenceDoc = xmlSignatureFactory.newReference("", digestMethod, transforms, null, null);
        Reference referenceQuP = xmlSignatureFactory.newReference("#" + sQualifyingPropertiesId,
                xmlSignatureFactory.newDigestMethod(digAlgorithm, null));

        List<Reference> references = new ArrayList();
        references.add(referenceDoc);
        references.add(referenceQuP);

        SignedInfo signedInfo = xmlSignatureFactory.newSignedInfo(c14nMethod, signMethod, references);

        KeyInfoFactory keyInfoFactory = xmlSignatureFactory.getKeyInfoFactory();
        X509Data x509Data = keyInfoFactory.newX509Data(Collections.singletonList(loadCertificate(keystoreAlias, ks, keystorePass)));
        KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(x509Data), sQualifyingPropertiesId);

        return xmlSignatureFactory.newXMLSignature(signedInfo, keyInfo, null, "_" + UUID.randomUUID(), null);
    }

    public static void sendSignedXml(String signedXml, String endpointUrl, String keystoreFile, String keystorePass) throws Exception {
        // Load KeyStore and initialize SSL context
        KeyStore keyStore = loadKeyStore(keystoreFile, keystorePass);
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);
        
        // Set default SSL context
        SSLContext.setDefault(sslContext);

        // Create HTTP connection
        URL url = new URL(endpointUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);
        connection.setRequestProperty("Content-Type", "application/xml");

        // Send signed XML
        connection.getOutputStream().write(signedXml.getBytes());
        connection.getOutputStream().flush();
        connection.getOutputStream().close();

        // Check response code
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        
        // Handle dynamic success and error responses
        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("Success: " + responseMessage);
            // Read the success response body
            InputStream responseStream = connection.getInputStream();
            StringBuilder responseBody = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(responseStream));
            String line;
            while ((line = reader.readLine()) != null) {
                responseBody.append(line);
            }
            System.out.println("Response Body: " + responseBody.toString());
        } else {
            // Handle error responses
            System.err.println("Error: " + responseCode + " - " + responseMessage);
            // Optionally, read the error response body
            InputStream errorStream = connection.getErrorStream();
            if (errorStream != null) {
                StringBuilder errorBody = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(errorStream));
                String line;
                while ((line = reader.readLine()) != null) {
                    errorBody.append(line);
                }
                System.err.println("Error Body: " + errorBody.toString());
            }
        }
        connection.disconnect();
    }

    public static void main(String[] args) {
        try {
            // Example usage
            String rawXml = "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:acmt.023.001.02\">\r\n"
            		+ "    <IdVrfctnReq>\r\n"
            		+ "        <Assgnmt>\r\n"
            		+ "            <MsgId>44f3</MsgId>\r\n"
            		+ "            <CreDtTm>2020-06-13T14:12:10</CreDtTm>\r\n"
            		+ "            <FrstAgt>\r\n"
            		+ "                <FinInstnId>\r\n"
            		+ "                    <Othr>\r\n"
            		+ "                        <Id>0020</Id>\r\n"
            		+ "                    </Othr>\r\n"
            		+ "                </FinInstnId>\r\n"
            		+ "            </FrstAgt>\r\n"
            		+ "            <Assgnr>\r\n"
            		+ "                <Agt>\r\n"
            		+ "                    <FinInstnId>\r\n"
            		+ "                        <Othr>\r\n"
            		+ "                            <Id>9999</Id>\r\n"
            		+ "                        </Othr>\r\n"
            		+ "                    </FinInstnId>\r\n"
            		+ "                </Agt>\r\n"
            		+ "            </Assgnr>\r\n"
            		+ "            <Assgne>\r\n"
            		+ "                <Agt>\r\n"
            		+ "                    <FinInstnId>\r\n"
            		+ "                        <Othr>\r\n"
            		+ "                            <Id>2031</Id>\r\n"
            		+ "                        </Othr>\r\n"
            		+ "                    </FinInstnId>\r\n"
            		+ "                </Agt>\r\n"
            		+ "            </Assgne>\r\n"
            		+ "        </Assgnmt>\r\n"
            		+ "        <Vrfctn>\r\n"
            		+ "            <Id>id000000000000000000000000000222</Id>\r\n"
            		+ "            <PtyAndAcctId>\r\n"
            		+ "                <Acct>\r\n"
            		+ "                    <Othr>\r\n"
            		+ "                        <Id>012112345600000785 </Id>\r\n"
            		+ "                        <SchmeNm>\r\n"
            		+ "                            <Prtry>PHNE</Prtry>\r\n"
            		+ "                        </SchmeNm>\r\n"
            		+ "                    </Othr>\r\n"
            		+ "                </Acct>\r\n"
            		+ "                <Agt>\r\n"
            		+ "                    <FinInstnId>\r\n"
            		+ "                        <Othr>\r\n"
            		+ "                            <Id>0030</Id>\r\n"
            		+ "                        </Othr>\r\n"
            		+ "                    </FinInstnId>\r\n"
            		+ "                </Agt>\r\n"
            		+ "            </PtyAndAcctId>\r\n"
            		+ "        </Vrfctn>\r\n"
            		+ "    </IdVrfctnReq>\r\n"
            		+ "<ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"_002d8ea7-ac76-4547-a0f7-c723862696cf\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/><ds:Reference URI=\"\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/><ds:DigestValue>skEq4FE7njuIcQjx/EDlO7I6ENS964qz87OFKV7joWM=</ds:DigestValue></ds:Reference><ds:Reference URI=\"#_111acb88-8a1b-4849-80c6-29824af372d7\"><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/><ds:DigestValue>/Plap+gGw1s9EtqUTp0A4LxxTnE/uFKAn0Wo+bMihqM=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>gQAu3qnbyGldfAnr0WRcn8RQY97KwVH6N94xt+sDVHk8+nRRZgYYTJYeXgRVbn76fhOmUpTktN+M\r\n"
            		+ "7f/aQ1Wc/eqRdUF8YiA66sXUWnQcCAxrS/Q17DhWLjfwphLAyXpvyOlfFOTtP+H8DL7TqgbY0/VX\r\n"
            		+ "H7CY9uHqziNNXFHURwaM9OkuP2LyexJP4mZgTjNFSze5rg5ny9VTNxJcrBgMVIv3NZE9FdFo1S6l\r\n"
            		+ "/yNvvDUyD+Yxmi203Mr/5HggpXGeUnWa0BRmzw6/GQVZz+IERSvt/M8fDIAVZINYs5kitA8SCKBQ\r\n"
            		+ "hiIwRBQZ8eHR5Fc20t2EcFQa1aUNOTB9MlMZXA==</ds:SignatureValue><ds:KeyInfo Id=\"_111acb88-8a1b-4849-80c6-29824af372d7\"><ds:X509Data><ds:X509Certificate>MIIFwzCCA6ugAwIBAgIUAVEWpzH8CWiFw+clf83ojv0BIT4wDQYJKoZIhvcNAQELBQAwfzELMAkG\r\n"
            		+ "A1UEBhMCS0UxEDAOBgNVBAgMB05haXJvYmkxDTALBgNVBAoMBElQU0wxEzARBgNVBAsMClRlY2hu\r\n"
            		+ "b2xvZ3kxGjAYBgNVBAMMEUlQU0wgSW50ZXJtZWRpYXRlMR4wHAYJKoZIhvcNAQkBFg9pbmZvQGlw\r\n"
            		+ "c2wuY28ua2UwHhcNMjQwODE0MTUzMTU1WhcNMjUwOTE2MTUzMjI1WjBqMQswCQYDVQQGEwJLRTEQ\r\n"
            		+ "MA4GA1UEBxMHTmFpcm9iaTENMAsGA1UEChMESVBTTDERMA8GA1UECxMIUGF5bWVudHMxJzAlBgNV\r\n"
            		+ "BAMTHjAwNzAtc2VhbC5zdGFnZS5wZXNhbGluay5jby5rZTCCASIwDQYJKoZIhvcNAQEBBQADggEP\r\n"
            		+ "ADCCAQoCggEBAMxPb8emGZud0NE2byO7Vxm0XVH5TofvVDnF1TnYCey6KGylKxhJiSGu39451xSF\r\n"
            		+ "+znCOiqALiQ4y6f9GyOQFovKJUO6s8/adtyGgHIiWS2on2It+SU9wvhalEZU5RTq9fZd00+W+oWW\r\n"
            		+ "/xDgj7EX0ORSW1jo/qhzSGdvgukzSLhhqHXXBzQE9mLM3j9/wSAnjB4/bvjQLDDeryWNDhVDJEQS\r\n"
            		+ "/nKYZTPmpByPgOSVXmtwLYoC7zzLOfRXY10/m0aJP810juwrpxmEssW4FhfFmU3JwyPGrmImWLaX\r\n"
            		+ "bq+O0cgCk/KvurcBJGDyb3pTxDLHZ3Dxqf3yhNAIYWdVZzxNdPMCAwEAAaOCAUowggFGMA4GA1Ud\r\n"
            		+ "DwEB/wQEAwIGwDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQVhFDnC0sIvSAJEwAQnAmuOQwyJDAf\r\n"
            		+ "BgNVHSMEGDAWgBSKj0mwWY9FuNR035FMI5x0FQgWIDBNBggrBgEFBQcBAQRBMD8wPQYIKwYBBQUH\r\n"
            		+ "MAKGMWh0dHA6Ly9jZXJ0LnN0YWdlLnBlc2FsaW5rLmNvLmtlL3YxL3NpZ25hdHVyZS5jcnQwQgYD\r\n"
            		+ "VR0fBDswOTA3oDWgM4YxaHR0cDovL2NlcnQuc3RhZ2UucGVzYWxpbmsuY28ua2UvdjEvc2lnbmF0\r\n"
            		+ "dXJlLmNybDBTBgNVHREETDBKoA0GA1UEYaAGDAQwMDcwgh4wMDcwLXNlYWwuc3RhZ2UucGVzYWxp\r\n"
            		+ "bmsuY28ua2WCGTAwNzAuc3RhZ2UucGVzYWxpbmsuY28ua2UwDQYJKoZIhvcNAQELBQADggIBAGjL\r\n"
            		+ "VrLaxmfMbHNGxaEWIWUwjTDch0WYdPhqa7j0Jy6DiRxlGJZHEDzyTUYgbw7WP8IjbU+hfqwgiEp4\r\n"
            		+ "v8rpOj/+fzhOj7L+yZH5qCFkhc0JTFVcM4r/FxnA4PPxYxEiZcm7wyLE7MJeVsYGQMbUsIke3ohL\r\n"
            		+ "brdpnD0hOSiYZ8WTZDnBT+xxaacZvWFQvyMUuXQJOpcPOZjW+ay/0KD8C+ZqK8V+auSqfw1u9wAf\r\n"
            		+ "SORczQrlEAypHicaLslgkT7h2F3cLEH0ze1+NcTrdfndhfwA5tEbYSTXG4ZmfvjbHq+tbXltyHtz\r\n"
            		+ "vmJKKIzvENXjiy/iS+Icu/i9RrbxnU4WxgdfNqwIBhofdnLhyNtWND5L6VoCMTpSpOUCkcFmXBOl\r\n"
            		+ "nIfBelFfbUAqrtU1Q4cAZywKZnDHqr4NlVAUUlDcRPdLi8CF1G0nOerKCbgAImLy55nRF+JxjOYN\r\n"
            		+ "xVUNmSHSH7XECGnqu+Ho2Tgp/mMRX/0053bYI2fdEHwtWkJ5lBX8dnkjRyQfr54VNo05LDGeLrL9\r\n"
            		+ "ve+lYLulkzznESWOGI6FtllWM9QdRKgKEtaRCq5mfBPJRz02vOCXCb0oFfuDyCNLbEM112OM517t\r\n"
            		+ "oh6Cq4sTxYQFE1TsLSB7l/sUGWJ86/YLfmj8D2Fj+6vdhfLwpXsbZvbhhavYTe27RRhuToHR</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature></Document>"+" ";
            String keystorePath = "C:\\Users\\karna\\\\OneDrive\\Documents\\client-truststore.jks";
            String keystorePass = "wso2carbon";
            String keystoreAlias = "seal-cert";
            String endpointUrl = "https://reqres.in/api/users?page=2";

            // Generate and sign XML
            String signedXml = sign(rawXml, keystorePath, keystorePass, keystoreAlias);
System.out.println(signedXml);
            // Send signed XML to endpoint
            sendSignedXml(signedXml, endpointUrl, keystorePath, keystorePass);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
