<?xml version="1.0" encoding="UTF-8"?>
<api context="/validationApi" name="validationApi" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST">
        <inSequence>
            <!-- Extracting relevant properties from the payload -->
            <property expression="//*[local-name()='Cdtr']/*[local-name()='Nm']/text()" name="CdtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='Nm']/text()" name="DbtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='CdtTrfTxInf']/*[local-name()='Amt']/*[local-name()='InstdAmt']/text()" name="InstdAmt" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="DbtrPhneNb" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Cdtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="CdtrPhneNb" scope="default" type="STRING"/>
            <!-- Logging the extracted properties -->
            <log level="custom">
                <property expression="get-property('CdtrNm')" name="CdtrNm"/>
                <property expression="get-property('DbtrNm')" name="DbtrNm"/>
                <property expression="get-property('InstdAmt')" name="InstdAmt"/>
                <property expression="get-property('DbtrPhneNb')" name="DbtrPhneNb"/>
                <property expression="get-property('CdtrPhneNb')" name="CdtrPhneNb"/>
            </log>
            <script language="js"><![CDATA[var log = mc.getServiceLog();
    function formatMobileNumber(mobileNumber) {
        mobileNumber = mobileNumber.trim();

        // Check if the number contains only digits
        if (!/^\d+$/.test(mobileNumber)) {
            return "Error: Mobile number must contain digits only.";
        }

        // Format number based on different valid formats
        if (mobileNumber.startsWith('254')) {
            return '+' + mobileNumber;
        } else if (mobileNumber.startsWith('07') || mobileNumber.startsWith('01')) {
            mobileNumber = '254' + mobileNumber.substring(1);
        } else if (mobileNumber.startsWith('7') || mobileNumber.startsWith('1')) {
            mobileNumber = '254' + mobileNumber;
        } else {
            return "Error: Mobile number must start with '254', '07', '01', '7', or '1'.";
        }

        // Final length validation for formatted number
        if (mobileNumber.length !== 12) {
            return "Error: Invalid mobile number length.";
        }
        return '+' + mobileNumber;
    }

    var CdtrNm = mc.getProperty("CdtrNm");
    var DbtrNm = mc.getProperty("DbtrNm");
    var InstdAmt = mc.getProperty("InstdAmt");
    
    // Retrieve and format phone numbers
    var DbtrPhneNb = mc.getProperty("DbtrPhneNb");
    var CdtrPhneNb = mc.getProperty("CdtrPhneNb");

    var formattedDbtrPhone = formatMobileNumber(DbtrPhneNb);
    var formattedCdtrPhone = formatMobileNumber(CdtrPhneNb);

    mc.setProperty("FormattedDbtrPhone", formattedDbtrPhone);
    mc.setProperty("FormattedCdtrPhone", formattedCdtrPhone);

    // Logging values to ensure they are being correctly captured
    log.info("CdtrNm: " + CdtrNm);
    log.info("DbtrNm: " + DbtrNm);
    log.info("InstdAmt: " + InstdAmt);
    log.info("Formatted Dbtr Phone: " + formattedDbtrPhone);
    log.info("Formatted Cdtr Phone: " + formattedCdtrPhone);

    // Validate extracted values
   if (CdtrNm == null || CdtrNm.trim() == "") {
        mc.setProperty("ValidationError", "CdtrNm is null or empty.");
    }
    // Check if DbtrNm is null or empty
    else if (DbtrNm == null || DbtrNm.trim() == "") {
        mc.setProperty("ValidationError", "DbtrNm is null or empty.");
    }
    // Check if InstdAmt is valid
    else if (InstdAmt == null || InstdAmt.trim() == "" || isNaN(InstdAmt)) {
        mc.setProperty("ValidationError", "InstdAmt is not a valid number or is null/empty.");
    } else if (formattedDbtrPhone.startsWith("Error") && formattedCdtrPhone.startsWith("Error")) {
        mc.setProperty("ValidationError", "Both debtor and creditor phone numbers are invalid.");
    } else {
        mc.setProperty("ValidationError", "Validation Passed");
    }]]></script>
            <log level="custom">
                <property expression="get-property('ValidationError')" name="FormattedPhoneNumber"/>
            </log>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
