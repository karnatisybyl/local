package XMLSignatureTestProject;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.security.cert.Certificate;
import java.util.Collections;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;

public class cdata {
    public static void main(String[] args) {
        try {
            // Load the XML document to be signed
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            Document doc = dbf.newDocumentBuilder().parse(new File("C:\\Users\\karna\\OneDrive\\Documents\\input.xml"));

            // Load the KeyStore
            KeyStore ks = KeyStore.getInstance("JKS");
            ks.load(new FileInputStream("C:\\Users\\karna\\OneDrive\\Documents\\client-truststore.jks"), "wso2carbon".toCharArray());

            // Retrieve the certificate
            Certificate cert = ks.getCertificate("bank0070_seal_v2");
            if (cert == null) {
                throw new Exception("Certificate is null. Ensure that the alias is correct.");
            }

            // Base64 string (ensure it is continuous and valid)
            String base64PrivateKey = "aGVsbG8"; // Base64 private key

            // Remove potential newlines or whitespace from Base64 string
            base64PrivateKey = base64PrivateKey.replaceAll("\\s+", "");

            // Decode the Base64-encoded private key
            byte[] decodedKey = Base64.getDecoder().decode(base64PrivateKey);
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PrivateKey privateKey = keyFactory.generatePrivate(keySpec);

            // Create an XML Signature factory
            XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

            // Create a Reference to the XML document
            Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA256, null),
                    Collections.singletonList(fac.newTransform(Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

            // Create the SignedInfo
            SignedInfo si = fac.newSignedInfo(
                    fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec) null),
                    fac.newSignatureMethod(SignatureMethod.RSA_SHA256, null),
                    Collections.singletonList(ref));

            // Create a KeyInfo containing the X509Data
            KeyInfoFactory kif = fac.getKeyInfoFactory();
            X509Data xd = kif.newX509Data(Collections.singletonList(cert));
            KeyInfo ki = kif.newKeyInfo(Collections.singletonList(xd));

            // Create a DOMSignContext and specify the RSA PrivateKey and location of the resulting XMLSignature's parent element
            DOMSignContext dsc = new DOMSignContext(privateKey, doc.getDocumentElement());

            // Create the XMLSignature, but don't sign it yet
            XMLSignature signature = fac.newXMLSignature(si, ki);

            // Marshal, generate (and sign) the enveloped signature
            signature.sign(dsc);

            // Output the resulting document
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer trans = tf.newTransformer();
            trans.transform(new DOMSource(doc), new StreamResult(new FileOutputStream("signed-xml-file.xml")));

            System.out.println("XML Document signed successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
