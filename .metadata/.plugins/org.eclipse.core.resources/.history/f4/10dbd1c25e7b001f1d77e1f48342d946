package ipsl.signature;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Key;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class HttpClientConfig extends AbstractMediator {
    // Signature algorithms
    protected static final String TYP_ALGORITHM = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
    protected static final String CAN_ALGORITHM = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
    protected static final String DIG_ALGORITHM = "http://www.w3.org/2001/04/xmlenc#sha256";
    protected static final String SIG_ALGORITHM = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";

    // Options for XML output
    protected static final boolean OMIT_DEC = true;
    protected static final boolean INDENT = false;

    private String xmlStringRaw;
    private String keystoreFile;
    private String keystorePass; 
    private String keystoreAlias; 
    private String endpointUrl; 

    // Getters and Setters
    public String getXmlStringRaw() {
        return xmlStringRaw;
    }

    public void setXmlStringRaw(String xmlStringRaw) {
        this.xmlStringRaw = xmlStringRaw;
    }

    public String getKeystoreFile() {
        return keystoreFile;
    }

    public void setKeystoreFile(String keystoreFile) {
        this.keystoreFile = keystoreFile;
    }

    public String getKeystorePass() {
        return keystorePass;
    }

    public void setKeystorePass(String keystorePass) {
        this.keystorePass = keystorePass;
    }

    public String getKeystoreAlias() {
        return keystoreAlias;
    }

    public void setKeystoreAlias(String keystoreAlias) {
        this.keystoreAlias = keystoreAlias;
    }

    public String getEndpointUrl() {
        return endpointUrl;
    }

    public void setEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
    }

    public static KeyStore loadKeyStore(String keystoreFile, String keystorePass) throws Exception {
        if (keystoreFile == null || keystoreFile.isEmpty()) {
            throw new IllegalArgumentException("Keystore file cannot be null or empty.");
        }

        InputStream is = openResource(keystoreFile);
        if (is == null) {
            throw new Exception("Failed to open keystore file: " + keystoreFile);
        }

        KeyStore keyStore;
        if (keystoreFile.endsWith(".p12")) {
            keyStore = KeyStore.getInstance("PKCS12", "BC");
        } else {
            keyStore = KeyStore.getInstance("JKS");
        }
        keyStore.load(is, keystorePass != null ? keystorePass.toCharArray() : new char[0]);

        return keyStore;
    }

    public static InputStream openResource(String fileName) throws Exception {
        if (fileName == null || fileName.isEmpty()) {
            return null;
        }
        if (fileName.startsWith("/") || fileName.contains(":")) {
            return new FileInputStream(fileName);
        }
        return Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);
    }

    public static PrivateKey loadPrivateKey(String keystoreAlias, KeyStore keyStore, String keystorePass) throws Exception {
        Key aliasKey = keyStore.getKey(keystoreAlias, keystorePass.toCharArray());
        return aliasKey instanceof PrivateKey ? (PrivateKey) aliasKey : null;
    }

    public static Certificate loadCertificate(String keystoreAlias, KeyStore keyStore) throws Exception {
        Certificate aliasCertificate = keyStore.getCertificate(keystoreAlias);
        return aliasCertificate instanceof X509Certificate ? (X509Certificate) aliasCertificate : null;
    }

    public static String sign(String content, String keystoreFile, String keystorePass, String keystoreAlias) throws Exception {
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setNamespaceAware(true);
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.parse(new ByteArrayInputStream(content.getBytes()));

        KeyStore ks = loadKeyStore(keystoreFile, keystorePass);
        XMLSignature xmlSignature = createXMLSignature(document, ks, keystoreAlias, keystorePass);
        Element rootNode = document.getDocumentElement();

        DOMSignContext domSignContext = new DOMSignContext(loadPrivateKey(keystoreAlias, ks, keystorePass), rootNode);
        domSignContext.setDefaultNamespacePrefix("ds");
        xmlSignature.sign(domSignContext);

        return nodeToString(rootNode);
    }

    public static String nodeToString(Node node) throws Exception {
        StringWriter stringWriter = new StringWriter();
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, OMIT_DEC ? "yes" : "no");
        transformer.setOutputProperty(OutputKeys.INDENT, INDENT ? "yes" : "no");
        transformer.transform(new DOMSource(node), new StreamResult(stringWriter));
        return stringWriter.toString();
    }

    public static XMLSignature createXMLSignature(Document document, KeyStore ks, String keystoreAlias, String keystorePass) throws Exception {
        XMLSignatureFactory xmlSignatureFactory = XMLSignatureFactory.getInstance("DOM");
        CanonicalizationMethod c14nMethod = xmlSignatureFactory.newCanonicalizationMethod(CAN_ALGORITHM, (C14NMethodParameterSpec) null);
        DigestMethod digestMethod = xmlSignatureFactory.newDigestMethod(DIG_ALGORITHM, null);
        SignatureMethod signMethod = xmlSignatureFactory.newSignatureMethod(SIG_ALGORITHM, null);
        Transform sigTransform = xmlSignatureFactory.newTransform(TYP_ALGORITHM, (TransformParameterSpec) null);
        Transform canTransform = xmlSignatureFactory.newTransform(CAN_ALGORITHM, (TransformParameterSpec) null);

        List<Transform> transforms = new ArrayList<>();
        transforms.add(sigTransform);
        transforms.add(canTransform);

        String uniqueGuid = UUID.randomUUID().toString();
        String qualifyingPropertiesId = "_" + uniqueGuid;

        Reference referenceDoc = xmlSignatureFactory.newReference("", digestMethod, transforms, null, null);
        Reference referenceQuP = xmlSignatureFactory.newReference("#" + qualifyingPropertiesId, xmlSignatureFactory.newDigestMethod(DIG_ALGORITHM, null));

        List<Reference> references = new ArrayList<>();
        references.add(referenceDoc);
        references.add(referenceQuP);

        SignedInfo signedInfo = xmlSignatureFactory.newSignedInfo(c14nMethod, signMethod, references);

        KeyInfoFactory keyInfoFactory = xmlSignatureFactory.getKeyInfoFactory();
        X509Data x509Data = keyInfoFactory.newX509Data(Collections.singletonList(loadCertificate(keystoreAlias, ks)));
        KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(x509Data), qualifyingPropertiesId);

        return xmlSignatureFactory.newXMLSignature(signedInfo, keyInfo, null, "_" + UUID.randomUUID(), null);
    }

    public static void sendSignedXml(String signedXml, String endpointUrl, String keystoreFile, String keystorePass) throws Exception {
        // Load KeyStore and initialize SSL context
        KeyStore keyStore = loadKeyStore(keystoreFile, keystorePass);
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);
        
        // Set default SSL context
        SSLContext.setDefault(sslContext);

        // Create HTTP connection
        URL url = new URL(endpointUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);
        connection.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");
        connection.getOutputStream().write(signedXml.getBytes("UTF-8"));
        
        // Check response code
        int responseCode = connection.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK) {
            throw new RuntimeException("HTTP POST request failed with code: " + responseCode);
        }
        
        // Read response
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            System.out.println("Response: " + response.toString());
        }
    }

    @Override
    public boolean mediate(MessageContext context) {
        try {
            String signedXml = sign(getXmlStringRaw(), getKeystoreFile(), getKeystorePass(), getKeystoreAlias());
            sendSignedXml(signedXml, getEndpointUrl(), getKeystoreFile(), getKeystorePass());
            return true;
        } catch (Exception e) {
            handleError(context, e);
            return false;
        }
    }

    private void handleError(MessageContext context, Exception e) {
        // Handle errors appropriately
        System.err.println("Error: " + e.getMessage());
        // Additional error handling logic
    }
}
