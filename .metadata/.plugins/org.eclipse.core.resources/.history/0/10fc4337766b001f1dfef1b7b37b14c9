package XMLSignatureTestProject;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class Main {

    public static void main(String[] args) {
        try {
            // Load the XML file
            String xmlFilePath = "C:\\path\\to\\your\\xmlfile.xml";  // Update with your XML file path
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(new File(xmlFilePath));

            // Load the private key and certificate
            String privateKeyPath = "C:\\Softwares\\DOCS\\certsIPSL\\IPSLCERTIFICATES\\bank0070.key";
            String certPath = "C:\\Program Files\\OpenSSL-Win64\\bin\\seal_cert-start.crt";
            PrivateKey privateKey = loadPrivateKey(privateKeyPath);
            X509Certificate x509Certificate = loadX509Certificate(certPath);

            // Sign the XML document
            Main signer = new Main();
            String signedXml = signer.signXMLString(doc, privateKey, x509Certificate);

            // Save the signed XML to a file
            String outputFilePath = "C:\\path\\to\\your\\signed_xml_output.xml";  // Update with your desired output path
            Files.write(Paths.get(outputFilePath), signedXml.getBytes());

            // Output the signed XML to console
            System.out.println("Signed XML:\n" + signedXml);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String signXMLString(Document document, PrivateKey privateKey, X509Certificate x509Certificate) throws Exception {
        // Set keyinfo and signature URI IDs
        String keyInfoId = java.util.UUID.randomUUID().toString();
        String signatureId = java.util.UUID.randomUUID().toString();

        // Create signing context
        javax.xml.crypto.dsig.DOMSignContext dsc = new javax.xml.crypto.dsig.DOMSignContext(privateKey, document.getDocumentElement());
        javax.xml.crypto.dsig.XMLSignatureFactory fac = javax.xml.crypto.dsig.XMLSignatureFactory.getInstance("DOM");

        // Set transform attributes for references
        javax.xml.crypto.dsig.Transform envelopedTransform = fac.newTransform(javax.xml.crypto.dsig.Transform.ENVELOPED, (javax.xml.crypto.dsig.spec.TransformParameterSpec) null);
        javax.xml.crypto.dsig.Transform c14NEXCTransform = fac.newTransform(javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE, (javax.xml.crypto.dsig.spec.TransformParameterSpec) null);
        java.util.List<javax.xml.crypto.dsig.Transform> transforms = java.util.Arrays.asList(envelopedTransform, c14NEXCTransform);

        // Get all the reference URI IDs
        javax.xml.crypto.dsig.Reference ref = fac.newReference("", fac.newDigestMethod(javax.xml.crypto.dsig.DigestMethod.SHA256, null), transforms, null, null);
        javax.xml.crypto.dsig.Reference keyInfoRef = fac.newReference(
                "#" + keyInfoId,
                fac.newDigestMethod(javax.xml.crypto.dsig.DigestMethod.SHA256, null),
                java.util.Collections.singletonList(fac.newTransform(javax.xml.crypto.dsig.CanonicalizationMethod.EXCLUSIVE, (javax.xml.crypto.dsig.spec.TransformParameterSpec) null)),
                null,
                null
        );

        java.util.List<javax.xml.crypto.dsig.Reference> refIds = java.util.Arrays.asList(ref, keyInfoRef);

        // Create the signing object with the references
        javax.xml.crypto.dsig.SignedInfo si = fac.newSignedInfo(
                fac.newCanonicalizationMethod(javax.xml.crypto.dsig.CanonicalizationMethod.INCLUSIVE, (javax.xml.crypto.dsig.spec.C14NMethodParameterSpec) null),
                fac.newSignatureMethod(javax.xml.crypto.dsig.SignatureMethod.RSA_SHA256, null),
                refIds
        );

        // Create keyinfo object with the signing certificate
        javax.xml.crypto.dsig.keyinfo.KeyInfoFactory kif = fac.getKeyInfoFactory();
        javax.xml.crypto.dsig.keyinfo.X509Data newX509Data = kif.newX509Data(java.util.Arrays.asList(x509Certificate));
        java.util.List<javax.xml.crypto.dsig.XMLStructure> data = java.util.Arrays.asList(newX509Data);
        javax.xml.crypto.dsig.keyinfo.KeyInfo ki = kif.newKeyInfo(data, keyInfoId);

        // Create xml signature object
        javax.xml.crypto.dsig.XMLSignature signature = fac.newXMLSignature(si, ki, null, signatureId, null);

        // Generating the signature
        signature.sign(dsc);

        // Marshal, generate, and sign the enveloped signature
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.transform(new DOMSource(document), new StreamResult(output));

        return new String(output.toByteArray());
    }

    private static PrivateKey loadPrivateKey(String filePath) throws Exception {
        String key = new String(Files.readAllBytes(Paths.get(filePath)));
        key = key.replace("-----BEGIN PRIVATE KEY-----", "")
                 .replace("-----END PRIVATE KEY-----", "")
                 .replaceAll("\\s", "");

        byte[] keyBytes = Base64.getDecoder().decode(key);
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePrivate(spec);
    }

    private static X509Certificate loadX509Certificate(String filePath) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        return (X509Certificate) cf.generateCertificate(fis);
    }
}