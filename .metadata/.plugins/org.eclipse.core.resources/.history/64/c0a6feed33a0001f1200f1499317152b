<?xml version="1.0" encoding="UTF-8"?>
<api context="/validationApi" name="validationApi" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST">
        <inSequence>
            <!-- Extracting relevant properties from the payload -->
            <property expression="//*[local-name()='Cdtr']/*[local-name()='Nm']/text()" name="CdtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='Nm']/text()" name="DbtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='CdtTrfTxInf']/*[local-name()='Amt']/*[local-name()='InstdAmt']/text()" name="InstdAmt" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="DbtrPhneNb" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Cdtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="CdtrPhneNb" scope="default" type="STRING"/>
            <!-- Logging the extracted properties -->
            <log level="custom">
                <property expression="get-property('CdtrNm')" name="CdtrNm"/>
                <property expression="get-property('DbtrNm')" name="DbtrNm"/>
                <property expression="get-property('InstdAmt')" name="InstdAmt"/>
                <property expression="get-property('DbtrPhneNb')" name="DbtrPhneNb"/>
                <property expression="get-property('CdtrPhneNb')" name="CdtrPhneNb"/>
            </log>
            <!-- Initialize the ValidationError property to "Validation Passed" -->
            <property name="ValidationError" scope="default" type="STRING" value="Validation Passed"/>
            <script language="js"><![CDATA[var log = mc.getServiceLog();

function validateMobileNumber(mobileNumber) {
    mobileNumber = mobileNumber.trim();
    log.info("Original Mobile Number: " + mobileNumber);

    // Regex to match Kenyan mobile numbers in both formats
    // 1. Starts with +254 and is 12 digits long
    // 2. Starts with 07/01 and is 10 digits, converts to +254
    var kenyaMobilePattern = /^(?:\+254\d{9}|\d{9})$/;

    // Check if the number matches the pattern
    if (kenyaMobilePattern.test(mobileNumber)) {
        // If number starts with 07 or 01, we add +254
        if (mobileNumber.startsWith("07") || mobileNumber.startsWith("01")) {
            return "+254" + mobileNumber.substring(1); // Convert to international format
        } else if (mobileNumber.startsWith("+254")) {
            return mobileNumber; // Already in international format
        }
    }

    // If the number does not match, return an error message
    log.error("Invalid mobile number format.");
    return "Error: Invalid mobile number format.";
}

var formattedPhone = validateMobileNumber(mc.getProperty("DbtrPhneNb"));
mc.setProperty("FormattedPhoneNumber", formattedPhone);

                var CdtrNm = mc.getProperty("CdtrNm");
                var DbtrNm = mc.getProperty("DbtrNm");
                var InstdAmt = mc.getProperty("InstdAmt");

                // Logging values to ensure they are being correctly captured
                log.info("CdtrNm: " + CdtrNm);
                log.info("DbtrNm: " + DbtrNm);
                log.info("InstdAmt: " + InstdAmt);
                log.info("Formatted Phone: " + phone);

                // Validate extracted values
                if (!CdtrNm || CdtrNm.trim() === "") {
                    mc.setProperty("ValidationError", "CdtrNm is null or empty.");
                } else if (!DbtrNm || DbtrNm.trim() === "") {
                    mc.setProperty("ValidationError", "DbtrNm is null or empty.");
                } else if (!InstdAmt || InstdAmt.trim() === "" || isNaN(InstdAmt)) {
                    mc.setProperty("ValidationError", "InstdAmt is not a valid number or is null/empty.");
                } else {
                    mc.setProperty("ValidationError", "Validation Passed");
                }]]></script>
            <!-- Logging the ValidationError -->
            <log level="custom">
                <property expression="get-property('ValidationError')" name="ValidationError"/>
            </log>
            <!-- Create a JSON response with the ValidationError -->
            <payloadFactory media-type="json">
                <format>
                    { "status": "FAILED", "description": "$1" }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ValidationError')"/>
                </args>
            </payloadFactory>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
