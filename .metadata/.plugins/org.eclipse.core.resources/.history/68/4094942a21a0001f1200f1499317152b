<?xml version="1.0" encoding="UTF-8"?>
<api context="/validationApi" name="validationApi" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST">
        <inSequence>
            <!-- Extracting relevant properties from the payload -->
            <property expression="//*[local-name()='Cdtr']/*[local-name()='Nm']/text()" name="CdtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='Nm']/text()" name="DbtrNm" scope="default" type="STRING"/>
            <property expression="//*[local-name()='CdtTrfTxInf']/*[local-name()='Amt']/*[local-name()='InstdAmt']/text()" name="InstdAmt" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Dbtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="DbtrPhneNb" scope="default" type="STRING"/>
            <property expression="//*[local-name()='Cdtr']/*[local-name()='CtctDtls']/*[local-name()='PhneNb']/text()" name="CdtrPhneNb" scope="default" type="STRING"/>
            <!-- Logging the extracted properties -->
            <log level="custom">
                <property expression="get-property('CdtrNm')" name="CdtrNm"/>
                <property expression="get-property('DbtrNm')" name="DbtrNm"/>
                <property expression="get-property('InstdAmt')" name="InstdAmt"/>
                <property expression="get-property('DbtrPhneNb')" name="DbtrPhneNb"/>
                <property expression="get-property('CdtrPhneNb')" name="CdtrPhneNb"/>
            </log>
            <script language="js"><![CDATA[var CdtrNm = mc.getProperty("CdtrNm");
        var DbtrNm = mc.getProperty("DbtrNm");
        var InstdAmt = mc.getProperty("InstdAmt");

        // Check if any of the properties are null or empty
        if (!CdtrNm || CdtrNm.trim() === "") {
            mc.setProperty("ValidationError", "CdtrNm is null or empty.");
        }
        if (!DbtrNm || DbtrNm.trim() === "") {
            mc.setProperty("ValidationError", "DbtrNm is null or empty.");
        }

        // Validate that InstdAmt is an integer
        if (!InstdAmt || InstdAmt.trim() === "" || isNaN(InstdAmt) || !Number.isInteger(parseFloat(InstdAmt))) {
            mc.setProperty("ValidationError", "InstdAmt is not a valid integer or is null/empty.");
        }

        // If any validation error was set, it will be used in the response
        var validationError = mc.getProperty("ValidationError");
        if (validationError) {
            mc.setProperty("ValidationError", validationError);  // Ensure it's set if validation failed
        } else {
            mc.setProperty("ValidationError", "Validation Passed.");  // Optional: Add success message if no errors
        }]]></script>
            <property expression="get-property('ValidationError')" name="ValidationError" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('ValidationError')" name="ValidationError"/>
            </log>
            <payloadFactory media-type="json">
                <format>
                    { "status": "FAILED", "description": "$1" }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ValidationError')"/>
                </args>
            </payloadFactory>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
