package ipsl.signature;

import javax.crypto.Cipher;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class DarajaSecurity {
	// Example implementation
	String initiatorPassword = "YourInitiatorPassword";
	X509Certificate cert = loadCertificate("path/to/certificate.cer");
	String securityCredential = generateSecurityCredential(initiatorPassword, cert);

    public static String generateSecurityCredential(String password, X509Certificate cert) {
        try {
            // Get public key from certificate
            PublicKey publicKey = cert.getPublicKey();
            
            // Initialize cipher
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            
            // Encrypt password
            byte[] encryptedBytes = cipher.doFinal(password.getBytes());
            
            // Convert to Base64
            return Base64.getEncoder().encodeToString(encryptedBytes);
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to generate security credential", e);
        }
    }
}
