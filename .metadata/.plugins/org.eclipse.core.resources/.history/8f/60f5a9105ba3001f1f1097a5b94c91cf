<?xml version="1.0" encoding="UTF-8"?>
<api context="/onBoardMerchantLnf" name="onBoardMerchantLnf" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST">
        <inSequence>
            <!-- Proceed to Mobile Number Format Validation Script -->
            <property expression="json-eval($.MobileNumber)" name="PHONE_NUMBER" scope="default" type="STRING"/>
            <property expression="json-eval($.RequestReference)" name="REQ_REF" scope="default" type="STRING"/>
            <property expression="json-eval($.BusinessName)" name="BNS_NAME" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('BNS_NAME')" name="Business Name: "/>
            </log>
            <!-- Switch Statement -->
            <switch source="get-property('PHONE_NUMBER')">
                <case regex="^\+?254[0-9]{9}$">
                    <log level="custom">
                        <property expression="get-property('PHONE_NUMBER')" name="Validated Mobile Number"/>
                    </log>
                </case>
                <default>
                    <script language="js"><![CDATA[function formatMobileNumber(mobileNumber) {
    var log = mc.getServiceLog();
    mobileNumber = mobileNumber.trim();
    if (!/^\d+$/.test(mobileNumber)) {
    	log.info(mobileNumber);
        return "Error: Mobile number must contain digits only.";
    }
    if (mobileNumber.startsWith('254')) {
        if (mobileNumber.length !== 12) {
            return "Error: Invalid mobile number length.";
        }
        return '+' + mobileNumber;
    }
    if (mobileNumber.startsWith('07') || mobileNumber.startsWith('01')) {
        mobileNumber = '254' + mobileNumber.substring(1);
    } else if (mobileNumber.startsWith('7') || mobileNumber.startsWith('1')) {
        mobileNumber = '254' + mobileNumber;
    } else {
        return "Error: Mobile number must start with '254', '07', '01', '7', or '1'.";
    }
    if (mobileNumber.length !== 12) {
        return "Error: Invalid mobile number length.";
    }
    log.info("Final Mobile: " + mobileNumber);
    return '+' + mobileNumber;
}
var phone = formatMobileNumber(mc.getProperty("PHONE_NUMBER"));
mc.setProperty("FormattedPhoneNumber", phone.toString());]]></script>
                    <!-- Log the formatted mobile number or the error message -->
                    <switch source="get-property('FormattedPhoneNumber')">
                        <case regex="^\+?254[0-9]{9}$">
                            <log level="custom">
                                <property expression="get-property('FormattedPhoneNumber')" name="Valid Mobile Number"/>
                            </log>
                        </case>
                        <default>
                            <log level="custom">
                                <property expression="get-property('FormattedPhoneNumber')" name="Error Message"/>
                            </log>
                            <payloadFactory media-type="json">
                                <format>
                                { "status": "FAILED", "description": "$1" }
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('FormattedPhoneNumber')"/>
                                </args>
                            </payloadFactory>
                            <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
                            <respond/>
                        </default>
                    </switch>
                </default>
            </switch>
            <property expression="json-eval($.AccountNumber)" name="ACCOUNT_NUMBER" scope="default" type="STRING"/>
            <sequence key="Flex_Acc_Validation"/>
            <log level="custom">
                <property expression="get-property('ACCOUNT_NUMBER')" name="Account Number final yes"/>
                <property expression="get-property('PayBillDataId')" name="PayBillDataId final"/>
            </log>
            <filter xpath="get-property('PayBillDataId') != 1">
                <then>
                    <log level="custom">
                        <property expression="get-property('PayBillDataId')" name="PayBillDataId passed script"/>
                        <property name="Db seq" value="Enter db seq"/>
                    </log>
                    <sequence key="dbInsertSequence"/>
                </then>
                <else>
                    <payloadFactory media-type="json">
                        <format>
                        {&#xd;"Error Code": "$1",&#xd;"Message": "$2"&#xd;}
                        </format>
                        <args>
                            <arg evaluator="xml" expression="get-property('PayBillDataId')"/>
                            <arg evaluator="xml" expression="get-property('ErrorMessage')"/>
                        </args>
                    </payloadFactory>
                    <respond/>
                </else>
            </filter>
            <log level="custom">
                <property name="SUCCESS" value="SEQUENCE COMPLETE"/>
            </log>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <sequence key="Fault_Sequence"/>
        </faultSequence>
    </resource>
</api>
