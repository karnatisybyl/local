package ipsl.signature;

import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.ContentType;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

import javax.net.ssl.SSLContext;
import java.io.File;
import java.io.FileReader;
import java.security.KeyPair;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.PrivateKey;

public class PostmanEquivalent {

    public static void main(String[] args) {
        try {
            // Load your certificate and key
            String crtFilePath = "C:/Users/k.reddy/Documents/IPSCERT/bank0070/bank0070_transport.cert.pem";
            String keyFilePath = "C:/Users/k.reddy/Documents/IPSCERT/bank0070/BANK0070.key";

            X509Certificate clientCert = loadCertificate(crtFilePath);
            PrivateKey privateKey = loadPrivateKey(keyFilePath);

            // Create SSL context with the client certificate and private key
            SSLContext sslContext = SSLContextBuilder.create()
                    .loadKeyMaterial(createKeyStore(clientCert, privateKey), null)
                    .loadTrustMaterial((TrustStrategy) (chain, authType) -> true)  // Trust all certs
                    .build();

            // Create an HTTP client with the SSL context
            try (CloseableHttpClient httpClient = HttpClients.custom()
                    .setSslcontext(sslContext)
                    .build()) {

                // Prepare the API request
                String apiUrl = "https://api.stage.pesalink.co.ke/iso20022/sync/v1/verification-request";
                HttpPost postRequest = new HttpPost(apiUrl);

                // Set XML request body
                String xmlPayload = "<xml><your-request-body/></xml>";  // Update this with your actual XML payload
                postRequest.setEntity(new StringEntity(xmlPayload, ContentType.APPLICATION_XML));

                // Execute the request and print response
                httpClient.execute(postRequest, response -> {
                    System.out.println("Response Code: " + response.getCode());
                    return null;
                });
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to load the client certificate from a PEM file
    private static X509Certificate loadCertificate(String certFilePath) throws Exception {
        try (FileReader certFileReader = new FileReader(certFilePath)) {
            CertificateFactory factory = CertificateFactory.getInstance("X.509");
            return (X509Certificate) factory.generateCertificate(new FileReader(certFilePath));
        }
    }

    // Method to load the private key from a PEM file
    private static PrivateKey loadPrivateKey(String keyFilePath) throws Exception {
        try (PEMParser pemParser = new PEMParser(new FileReader(keyFilePath))) {
            Object object = pemParser.readObject();
            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
            KeyPair keyPair = converter.getKeyPair((PEMKeyPair) object);
            return keyPair.getPrivate();
        }
    }

    // Method to create a KeyStore with the certificate and private key
    private static KeyStore createKeyStore(X509Certificate certificate, PrivateKey privateKey) throws Exception {
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);  // Initialize an empty keystore
        keyStore.setKeyEntry("alias", privateKey, null, new X509Certificate[]{certificate});
        return keyStore;
    }

        }