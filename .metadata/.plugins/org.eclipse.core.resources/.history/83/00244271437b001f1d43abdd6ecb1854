package ipsl.signature;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Key;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class Ep extends AbstractMediator {
    private String xmlStringRaw;
    private String keystoreFile;
    private String keystorePass;
    private String keystoreAlias;
    private String endpointUrl;
    private static final Log log = LogFactory.getLog(Ep.class);

    protected static final String typAlgorithm = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
    protected static final String canAlgorithm = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
    protected static final String digAlgorithm = "http://www.w3.org/2001/04/xmlenc#sha256";
    protected static final String sigAlgorithm = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";

    protected static final boolean omitDec = true;
    protected static final boolean indent = false;

    // Getters and setters for class properties
    public String getXmlStringRaw() {
        return xmlStringRaw;
    }

    public void setXmlStringRaw(String xmlStringRaw) {
        this.xmlStringRaw = xmlStringRaw;
    }

    public String getKeystoreFile() {
        return keystoreFile;
    }

    public void setKeystoreFile(String keystoreFile) {
        this.keystoreFile = keystoreFile;
    }

    public String getKeystorePass() {
        return keystorePass;
    }

    public void setKeystorePass(String keystorePass) {
        this.keystorePass = keystorePass;
    }

    public String getKeystoreAlias() {
        return keystoreAlias;
    }

    public void setKeystoreAlias(String keystoreAlias) {
        this.keystoreAlias = keystoreAlias;
    }

    public String getEndpointUrl() {
        return endpointUrl;
    }

    public void setEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
    }

    @Override
    public boolean mediate(MessageContext context) {
        try {
            // Sign the XML
   

            // Send the signed XML to the endpoint
           
        } catch (Exception e) {
            log.error("Error during signing or sending XML: " + e.getMessage(), e);
            context.setProperty("sendStatus", "FAILURE");
            context.setProperty("errorMessage", e.getMessage());
        }
        return true;
    }

   
}
